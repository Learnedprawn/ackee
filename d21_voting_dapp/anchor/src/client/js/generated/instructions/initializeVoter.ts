/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { D21_VOTING_DAPP_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_VOTER_DISCRIMINATOR = new Uint8Array([
  105, 39, 201, 10, 15, 118, 10, 107,
]);

export function getInitializeVoterDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_VOTER_DISCRIMINATOR
  );
}

export type InitializeVoterInstruction<
  TProgram extends string = typeof D21_VOTING_DAPP_PROGRAM_ADDRESS,
  TAccountVoter extends string | AccountMeta<string> = string,
  TAccountElection extends string | AccountMeta<string> = string,
  TAccountVoterAccount extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountVoter extends string
        ? WritableSignerAccount<TAccountVoter> &
            AccountSignerMeta<TAccountVoter>
        : TAccountVoter,
      TAccountElection extends string
        ? WritableAccount<TAccountElection>
        : TAccountElection,
      TAccountVoterAccount extends string
        ? WritableAccount<TAccountVoterAccount>
        : TAccountVoterAccount,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeVoterInstructionData = {
  discriminator: ReadonlyUint8Array;
  electionId: bigint;
  voterName: string;
};

export type InitializeVoterInstructionDataArgs = {
  electionId: number | bigint;
  voterName: string;
};

export function getInitializeVoterInstructionDataEncoder(): Encoder<InitializeVoterInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['electionId', getU64Encoder()],
      ['voterName', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_VOTER_DISCRIMINATOR })
  );
}

export function getInitializeVoterInstructionDataDecoder(): Decoder<InitializeVoterInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['electionId', getU64Decoder()],
    ['voterName', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getInitializeVoterInstructionDataCodec(): Codec<
  InitializeVoterInstructionDataArgs,
  InitializeVoterInstructionData
> {
  return combineCodec(
    getInitializeVoterInstructionDataEncoder(),
    getInitializeVoterInstructionDataDecoder()
  );
}

export type InitializeVoterAsyncInput<
  TAccountVoter extends string = string,
  TAccountElection extends string = string,
  TAccountVoterAccount extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  voter: TransactionSigner<TAccountVoter>;
  election: Address<TAccountElection>;
  voterAccount?: Address<TAccountVoterAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  electionId: InitializeVoterInstructionDataArgs['electionId'];
  voterName: InitializeVoterInstructionDataArgs['voterName'];
};

export async function getInitializeVoterInstructionAsync<
  TAccountVoter extends string,
  TAccountElection extends string,
  TAccountVoterAccount extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof D21_VOTING_DAPP_PROGRAM_ADDRESS,
>(
  input: InitializeVoterAsyncInput<
    TAccountVoter,
    TAccountElection,
    TAccountVoterAccount,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeVoterInstruction<
    TProgramAddress,
    TAccountVoter,
    TAccountElection,
    TAccountVoterAccount,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? D21_VOTING_DAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    voter: { value: input.voter ?? null, isWritable: true },
    election: { value: input.election ?? null, isWritable: true },
    voterAccount: { value: input.voterAccount ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.voterAccount.value) {
    accounts.voterAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 111, 116, 101, 114])),
        getAddressEncoder().encode(expectAddress(accounts.voter.value)),
        getAddressEncoder().encode(expectAddress(accounts.election.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.voter),
      getAccountMeta(accounts.election),
      getAccountMeta(accounts.voterAccount),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeVoterInstructionDataEncoder().encode(
      args as InitializeVoterInstructionDataArgs
    ),
  } as InitializeVoterInstruction<
    TProgramAddress,
    TAccountVoter,
    TAccountElection,
    TAccountVoterAccount,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeVoterInput<
  TAccountVoter extends string = string,
  TAccountElection extends string = string,
  TAccountVoterAccount extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  voter: TransactionSigner<TAccountVoter>;
  election: Address<TAccountElection>;
  voterAccount: Address<TAccountVoterAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  electionId: InitializeVoterInstructionDataArgs['electionId'];
  voterName: InitializeVoterInstructionDataArgs['voterName'];
};

export function getInitializeVoterInstruction<
  TAccountVoter extends string,
  TAccountElection extends string,
  TAccountVoterAccount extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof D21_VOTING_DAPP_PROGRAM_ADDRESS,
>(
  input: InitializeVoterInput<
    TAccountVoter,
    TAccountElection,
    TAccountVoterAccount,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeVoterInstruction<
  TProgramAddress,
  TAccountVoter,
  TAccountElection,
  TAccountVoterAccount,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? D21_VOTING_DAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    voter: { value: input.voter ?? null, isWritable: true },
    election: { value: input.election ?? null, isWritable: true },
    voterAccount: { value: input.voterAccount ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.voter),
      getAccountMeta(accounts.election),
      getAccountMeta(accounts.voterAccount),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeVoterInstructionDataEncoder().encode(
      args as InitializeVoterInstructionDataArgs
    ),
  } as InitializeVoterInstruction<
    TProgramAddress,
    TAccountVoter,
    TAccountElection,
    TAccountVoterAccount,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeVoterInstruction<
  TProgram extends string = typeof D21_VOTING_DAPP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    voter: TAccountMetas[0];
    election: TAccountMetas[1];
    voterAccount: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: InitializeVoterInstructionData;
};

export function parseInitializeVoterInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeVoterInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      voter: getNextAccount(),
      election: getNextAccount(),
      voterAccount: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeVoterInstructionDataDecoder().decode(instruction.data),
  };
}
