/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { D21_VOTING_DAPP_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_ELECTION_DISCRIMINATOR = new Uint8Array([
  59, 166, 191, 126, 195, 0, 153, 168,
]);

export function getInitializeElectionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_ELECTION_DISCRIMINATOR
  );
}

export type InitializeElectionInstruction<
  TProgram extends string = typeof D21_VOTING_DAPP_PROGRAM_ADDRESS,
  TAccountElectionOrganizer extends string | AccountMeta<string> = string,
  TAccountElection extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountElectionOrganizer extends string
        ? WritableSignerAccount<TAccountElectionOrganizer> &
            AccountSignerMeta<TAccountElectionOrganizer>
        : TAccountElectionOrganizer,
      TAccountElection extends string
        ? WritableAccount<TAccountElection>
        : TAccountElection,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeElectionInstructionData = {
  discriminator: ReadonlyUint8Array;
  electionId: bigint;
  electionName: string;
  electionDescription: string;
  electionFee: bigint;
  electionOrganizer: Address;
  startDate: bigint;
  endDate: bigint;
};

export type InitializeElectionInstructionDataArgs = {
  electionId: number | bigint;
  electionName: string;
  electionDescription: string;
  electionFee: number | bigint;
  electionOrganizer: Address;
  startDate: number | bigint;
  endDate: number | bigint;
};

export function getInitializeElectionInstructionDataEncoder(): Encoder<InitializeElectionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['electionId', getU64Encoder()],
      ['electionName', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'electionDescription',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      ['electionFee', getU64Encoder()],
      ['electionOrganizer', getAddressEncoder()],
      ['startDate', getI64Encoder()],
      ['endDate', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_ELECTION_DISCRIMINATOR })
  );
}

export function getInitializeElectionInstructionDataDecoder(): Decoder<InitializeElectionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['electionId', getU64Decoder()],
    ['electionName', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'electionDescription',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    ['electionFee', getU64Decoder()],
    ['electionOrganizer', getAddressDecoder()],
    ['startDate', getI64Decoder()],
    ['endDate', getI64Decoder()],
  ]);
}

export function getInitializeElectionInstructionDataCodec(): Codec<
  InitializeElectionInstructionDataArgs,
  InitializeElectionInstructionData
> {
  return combineCodec(
    getInitializeElectionInstructionDataEncoder(),
    getInitializeElectionInstructionDataDecoder()
  );
}

export type InitializeElectionAsyncInput<
  TAccountElectionOrganizer extends string = string,
  TAccountElection extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  electionOrganizer: TransactionSigner<TAccountElectionOrganizer>;
  election?: Address<TAccountElection>;
  systemProgram?: Address<TAccountSystemProgram>;
  electionId: InitializeElectionInstructionDataArgs['electionId'];
  electionName: InitializeElectionInstructionDataArgs['electionName'];
  electionDescription: InitializeElectionInstructionDataArgs['electionDescription'];
  electionFee: InitializeElectionInstructionDataArgs['electionFee'];
  electionOrganizerArg: InitializeElectionInstructionDataArgs['electionOrganizer'];
  startDate: InitializeElectionInstructionDataArgs['startDate'];
  endDate: InitializeElectionInstructionDataArgs['endDate'];
};

export async function getInitializeElectionInstructionAsync<
  TAccountElectionOrganizer extends string,
  TAccountElection extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof D21_VOTING_DAPP_PROGRAM_ADDRESS,
>(
  input: InitializeElectionAsyncInput<
    TAccountElectionOrganizer,
    TAccountElection,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeElectionInstruction<
    TProgramAddress,
    TAccountElectionOrganizer,
    TAccountElection,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? D21_VOTING_DAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    electionOrganizer: {
      value: input.electionOrganizer ?? null,
      isWritable: true,
    },
    election: { value: input.election ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input, electionOrganizer: input.electionOrganizerArg };

  // Resolve default values.
  if (!accounts.election.value) {
    accounts.election.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([101, 108, 101, 99, 116, 105, 111, 110])
        ),
        getU64Encoder().encode(expectSome(args.electionId)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.electionOrganizer),
      getAccountMeta(accounts.election),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeElectionInstructionDataEncoder().encode(
      args as InitializeElectionInstructionDataArgs
    ),
  } as InitializeElectionInstruction<
    TProgramAddress,
    TAccountElectionOrganizer,
    TAccountElection,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeElectionInput<
  TAccountElectionOrganizer extends string = string,
  TAccountElection extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  electionOrganizer: TransactionSigner<TAccountElectionOrganizer>;
  election: Address<TAccountElection>;
  systemProgram?: Address<TAccountSystemProgram>;
  electionId: InitializeElectionInstructionDataArgs['electionId'];
  electionName: InitializeElectionInstructionDataArgs['electionName'];
  electionDescription: InitializeElectionInstructionDataArgs['electionDescription'];
  electionFee: InitializeElectionInstructionDataArgs['electionFee'];
  electionOrganizerArg: InitializeElectionInstructionDataArgs['electionOrganizer'];
  startDate: InitializeElectionInstructionDataArgs['startDate'];
  endDate: InitializeElectionInstructionDataArgs['endDate'];
};

export function getInitializeElectionInstruction<
  TAccountElectionOrganizer extends string,
  TAccountElection extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof D21_VOTING_DAPP_PROGRAM_ADDRESS,
>(
  input: InitializeElectionInput<
    TAccountElectionOrganizer,
    TAccountElection,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeElectionInstruction<
  TProgramAddress,
  TAccountElectionOrganizer,
  TAccountElection,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? D21_VOTING_DAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    electionOrganizer: {
      value: input.electionOrganizer ?? null,
      isWritable: true,
    },
    election: { value: input.election ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input, electionOrganizer: input.electionOrganizerArg };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.electionOrganizer),
      getAccountMeta(accounts.election),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeElectionInstructionDataEncoder().encode(
      args as InitializeElectionInstructionDataArgs
    ),
  } as InitializeElectionInstruction<
    TProgramAddress,
    TAccountElectionOrganizer,
    TAccountElection,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeElectionInstruction<
  TProgram extends string = typeof D21_VOTING_DAPP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    electionOrganizer: TAccountMetas[0];
    election: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitializeElectionInstructionData;
};

export function parseInitializeElectionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeElectionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      electionOrganizer: getNextAccount(),
      election: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeElectionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
