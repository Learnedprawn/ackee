/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { D21_VOTING_DAPP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CALCULATE_RESULT_DISCRIMINATOR = new Uint8Array([
  123, 233, 156, 12, 114, 212, 241, 66,
]);

export function getCalculateResultDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CALCULATE_RESULT_DISCRIMINATOR
  );
}

export type CalculateResultInstruction<
  TProgram extends string = typeof D21_VOTING_DAPP_PROGRAM_ADDRESS,
  TAccountAnyone extends string | AccountMeta<string> = string,
  TAccountElection extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAnyone extends string
        ? WritableSignerAccount<TAccountAnyone> &
            AccountSignerMeta<TAccountAnyone>
        : TAccountAnyone,
      TAccountElection extends string
        ? WritableAccount<TAccountElection>
        : TAccountElection,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CalculateResultInstructionData = {
  discriminator: ReadonlyUint8Array;
  electionId: bigint;
};

export type CalculateResultInstructionDataArgs = {
  electionId: number | bigint;
};

export function getCalculateResultInstructionDataEncoder(): FixedSizeEncoder<CalculateResultInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['electionId', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CALCULATE_RESULT_DISCRIMINATOR })
  );
}

export function getCalculateResultInstructionDataDecoder(): FixedSizeDecoder<CalculateResultInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['electionId', getU64Decoder()],
  ]);
}

export function getCalculateResultInstructionDataCodec(): FixedSizeCodec<
  CalculateResultInstructionDataArgs,
  CalculateResultInstructionData
> {
  return combineCodec(
    getCalculateResultInstructionDataEncoder(),
    getCalculateResultInstructionDataDecoder()
  );
}

export type CalculateResultInput<
  TAccountAnyone extends string = string,
  TAccountElection extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  anyone: TransactionSigner<TAccountAnyone>;
  election: Address<TAccountElection>;
  systemProgram?: Address<TAccountSystemProgram>;
  electionId: CalculateResultInstructionDataArgs['electionId'];
};

export function getCalculateResultInstruction<
  TAccountAnyone extends string,
  TAccountElection extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof D21_VOTING_DAPP_PROGRAM_ADDRESS,
>(
  input: CalculateResultInput<
    TAccountAnyone,
    TAccountElection,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CalculateResultInstruction<
  TProgramAddress,
  TAccountAnyone,
  TAccountElection,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? D21_VOTING_DAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    anyone: { value: input.anyone ?? null, isWritable: true },
    election: { value: input.election ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.anyone),
      getAccountMeta(accounts.election),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCalculateResultInstructionDataEncoder().encode(
      args as CalculateResultInstructionDataArgs
    ),
  } as CalculateResultInstruction<
    TProgramAddress,
    TAccountAnyone,
    TAccountElection,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCalculateResultInstruction<
  TProgram extends string = typeof D21_VOTING_DAPP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    anyone: TAccountMetas[0];
    election: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: CalculateResultInstructionData;
};

export function parseCalculateResultInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCalculateResultInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      anyone: getNextAccount(),
      election: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCalculateResultInstructionDataDecoder().decode(instruction.data),
  };
}
