/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const VOTER_DISCRIMINATOR = new Uint8Array([
  241, 93, 35, 191, 254, 147, 17, 202,
]);

export function getVoterDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(VOTER_DISCRIMINATOR);
}

export type Voter = {
  discriminator: ReadonlyUint8Array;
  voter: Address;
  election: Address;
  name: string;
  votesGiven: bigint;
  negativeVotesGiven: bigint;
};

export type VoterArgs = {
  voter: Address;
  election: Address;
  name: string;
  votesGiven: number | bigint;
  negativeVotesGiven: number | bigint;
};

export function getVoterEncoder(): Encoder<VoterArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['voter', getAddressEncoder()],
      ['election', getAddressEncoder()],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['votesGiven', getI64Encoder()],
      ['negativeVotesGiven', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: VOTER_DISCRIMINATOR })
  );
}

export function getVoterDecoder(): Decoder<Voter> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['voter', getAddressDecoder()],
    ['election', getAddressDecoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['votesGiven', getI64Decoder()],
    ['negativeVotesGiven', getI64Decoder()],
  ]);
}

export function getVoterCodec(): Codec<VoterArgs, Voter> {
  return combineCodec(getVoterEncoder(), getVoterDecoder());
}

export function decodeVoter<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Voter, TAddress>;
export function decodeVoter<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Voter, TAddress>;
export function decodeVoter<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Voter, TAddress> | MaybeAccount<Voter, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVoterDecoder()
  );
}

export async function fetchVoter<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Voter, TAddress>> {
  const maybeAccount = await fetchMaybeVoter(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVoter<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Voter, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVoter(maybeAccount);
}

export async function fetchAllVoter(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Voter>[]> {
  const maybeAccounts = await fetchAllMaybeVoter(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVoter(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Voter>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeVoter(maybeAccount));
}
