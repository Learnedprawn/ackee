/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const ELECTION_DISCRIMINATOR = new Uint8Array([
  68, 191, 164, 85, 35, 105, 152, 202,
]);

export function getElectionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(ELECTION_DISCRIMINATOR);
}

export type Election = {
  discriminator: ReadonlyUint8Array;
  electionId: bigint;
  electionName: string;
  electionDescription: string;
  electionFee: bigint;
  electionOrganizer: Address;
  startDate: bigint;
  endDate: bigint;
  candidate1: Address;
  candidate1Votes: bigint;
  candidate2: Address;
  candidate2Votes: bigint;
  winner: Address;
};

export type ElectionArgs = {
  electionId: number | bigint;
  electionName: string;
  electionDescription: string;
  electionFee: number | bigint;
  electionOrganizer: Address;
  startDate: number | bigint;
  endDate: number | bigint;
  candidate1: Address;
  candidate1Votes: number | bigint;
  candidate2: Address;
  candidate2Votes: number | bigint;
  winner: Address;
};

export function getElectionEncoder(): Encoder<ElectionArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['electionId', getU64Encoder()],
      ['electionName', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'electionDescription',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      ['electionFee', getU64Encoder()],
      ['electionOrganizer', getAddressEncoder()],
      ['startDate', getI64Encoder()],
      ['endDate', getI64Encoder()],
      ['candidate1', getAddressEncoder()],
      ['candidate1Votes', getU64Encoder()],
      ['candidate2', getAddressEncoder()],
      ['candidate2Votes', getU64Encoder()],
      ['winner', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: ELECTION_DISCRIMINATOR })
  );
}

export function getElectionDecoder(): Decoder<Election> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['electionId', getU64Decoder()],
    ['electionName', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'electionDescription',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    ['electionFee', getU64Decoder()],
    ['electionOrganizer', getAddressDecoder()],
    ['startDate', getI64Decoder()],
    ['endDate', getI64Decoder()],
    ['candidate1', getAddressDecoder()],
    ['candidate1Votes', getU64Decoder()],
    ['candidate2', getAddressDecoder()],
    ['candidate2Votes', getU64Decoder()],
    ['winner', getAddressDecoder()],
  ]);
}

export function getElectionCodec(): Codec<ElectionArgs, Election> {
  return combineCodec(getElectionEncoder(), getElectionDecoder());
}

export function decodeElection<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Election, TAddress>;
export function decodeElection<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Election, TAddress>;
export function decodeElection<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Election, TAddress> | MaybeAccount<Election, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getElectionDecoder()
  );
}

export async function fetchElection<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Election, TAddress>> {
  const maybeAccount = await fetchMaybeElection(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeElection<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Election, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeElection(maybeAccount);
}

export async function fetchAllElection(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Election>[]> {
  const maybeAccounts = await fetchAllMaybeElection(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeElection(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Election>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeElection(maybeAccount));
}
