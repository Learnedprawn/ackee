/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedCalculateResultInstruction,
  type ParsedInitializeCandidateInstruction,
  type ParsedInitializeElectionInstruction,
  type ParsedInitializeVoterInstruction,
  type ParsedVoteInstruction,
} from '../instructions';

export const D21_VOTING_DAPP_PROGRAM_ADDRESS =
  'AjYHbu4pMAkeDHSzAXo2bTgr41PpmdxfW3SNnStNt3oz' as Address<'AjYHbu4pMAkeDHSzAXo2bTgr41PpmdxfW3SNnStNt3oz'>;

export enum D21VotingDappAccount {
  Candidate,
  Election,
  Voter,
}

export function identifyD21VotingDappAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): D21VotingDappAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([86, 69, 250, 96, 193, 10, 222, 123])
      ),
      0
    )
  ) {
    return D21VotingDappAccount.Candidate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([68, 191, 164, 85, 35, 105, 152, 202])
      ),
      0
    )
  ) {
    return D21VotingDappAccount.Election;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([241, 93, 35, 191, 254, 147, 17, 202])
      ),
      0
    )
  ) {
    return D21VotingDappAccount.Voter;
  }
  throw new Error(
    'The provided account could not be identified as a d21VotingDapp account.'
  );
}

export enum D21VotingDappInstruction {
  CalculateResult,
  InitializeCandidate,
  InitializeElection,
  InitializeVoter,
  Vote,
}

export function identifyD21VotingDappInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): D21VotingDappInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([123, 233, 156, 12, 114, 212, 241, 66])
      ),
      0
    )
  ) {
    return D21VotingDappInstruction.CalculateResult;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([210, 107, 118, 204, 255, 97, 112, 26])
      ),
      0
    )
  ) {
    return D21VotingDappInstruction.InitializeCandidate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([59, 166, 191, 126, 195, 0, 153, 168])
      ),
      0
    )
  ) {
    return D21VotingDappInstruction.InitializeElection;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([105, 39, 201, 10, 15, 118, 10, 107])
      ),
      0
    )
  ) {
    return D21VotingDappInstruction.InitializeVoter;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([227, 110, 155, 23, 136, 126, 172, 25])
      ),
      0
    )
  ) {
    return D21VotingDappInstruction.Vote;
  }
  throw new Error(
    'The provided instruction could not be identified as a d21VotingDapp instruction.'
  );
}

export type ParsedD21VotingDappInstruction<
  TProgram extends string = 'AjYHbu4pMAkeDHSzAXo2bTgr41PpmdxfW3SNnStNt3oz',
> =
  | ({
      instructionType: D21VotingDappInstruction.CalculateResult;
    } & ParsedCalculateResultInstruction<TProgram>)
  | ({
      instructionType: D21VotingDappInstruction.InitializeCandidate;
    } & ParsedInitializeCandidateInstruction<TProgram>)
  | ({
      instructionType: D21VotingDappInstruction.InitializeElection;
    } & ParsedInitializeElectionInstruction<TProgram>)
  | ({
      instructionType: D21VotingDappInstruction.InitializeVoter;
    } & ParsedInitializeVoterInstruction<TProgram>)
  | ({
      instructionType: D21VotingDappInstruction.Vote;
    } & ParsedVoteInstruction<TProgram>);
